# Zedule Dockerfile - Optimized for production
# Multi-stage build for optimal image size

FROM --platform=$BUILDPLATFORM node:18 AS builder

WORKDIR /app

# Build arguments
ARG DATABASE_URL
ARG NEXTAUTH_SECRET=secret
ARG CALENDSO_ENCRYPTION_KEY=secret
ARG MAX_OLD_SPACE_SIZE=4096
ARG NEXT_PUBLIC_WEBAPP_URL=http://WEBAPP_URL_PLACEHOLDER
ARG NEXT_PUBLIC_API_V2_URL

# Environment variables for build
ENV NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL \
    NEXT_PUBLIC_API_V2_URL=$NEXT_PUBLIC_API_V2_URL \
    DATABASE_URL=$DATABASE_URL \
    DATABASE_DIRECT_URL=$DATABASE_URL \
    NEXTAUTH_SECRET=$NEXTAUTH_SECRET \
    CALENDSO_ENCRYPTION_KEY=$CALENDSO_ENCRYPTION_KEY \
    NODE_OPTIONS=--max-old-space-size=$MAX_OLD_SPACE_SIZE \
    BUILD_STANDALONE=true \
    NEXT_PUBLIC_APP_NAME=Zedule \
    CALCOM_TELEMETRY_DISABLED=1

# Copy package files first for better caching
COPY package.json yarn.lock .yarnrc.yml playwright.config.ts turbo.json i18n.json ./
COPY .yarn ./.yarn

# Copy application code
COPY apps/web ./apps/web
COPY apps/api/v2 ./apps/api/v2
COPY packages ./packages
COPY tests ./tests

# Install dependencies and build
RUN yarn config set httpTimeout 1200000
RUN npx turbo prune --scope=@calcom/web --scope=@calcom/trpc --docker || true
RUN yarn install

# Build packages in correct order
RUN yarn workspace @calcom/trpc run build
RUN yarn --cwd packages/embeds/embed-core workspace @calcom/embed-core run build
RUN yarn --cwd apps/web workspace @calcom/web run build

# Clean up build artifacts (but keep .next build output!)
RUN rm -rf node_modules/.cache .yarn/cache apps/web/.next/cache apps/web/.next/standalone/apps/web/.next/cache

# Second stage for production setup
FROM node:18 AS builder-two

WORKDIR /app
ARG NEXT_PUBLIC_WEBAPP_URL=http://localhost:3000

ENV NODE_ENV=production

# Copy necessary files from builder
COPY package.json .yarnrc.yml turbo.json i18n.json ./
COPY .yarn ./.yarn
COPY --from=builder /app/yarn.lock ./yarn.lock
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/packages ./packages
COPY --from=builder /app/apps ./apps
COPY --from=builder /app/packages/prisma/schema.prisma ./packages/prisma/schema.prisma

# Copy scripts directory
COPY scripts ./scripts

# Set webapp URL
ENV NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL \
    BUILT_NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL

# Replace placeholder if script exists
RUN if [ -f scripts/replace-placeholder.sh ]; then \
        scripts/replace-placeholder.sh http://WEBAPP_URL_PLACEHOLDER ${NEXT_PUBLIC_WEBAPP_URL}; \
    fi

# Final production image
FROM node:18 AS runner

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copy application from builder-two
COPY --from=builder-two /app ./

ARG NEXT_PUBLIC_WEBAPP_URL=http://localhost:3000

# Runtime environment
ENV NODE_ENV=production \
    NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL \
    BUILT_NEXT_PUBLIC_WEBAPP_URL=$NEXT_PUBLIC_WEBAPP_URL \
    NEXT_PUBLIC_APP_NAME=Zedule

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --retries=5 \
    CMD curl -f http://localhost:3000 || exit 1

# Copy and setup start script
COPY docker-start.sh /app/docker-start.sh
RUN chmod +x /app/docker-start.sh

CMD ["/app/docker-start.sh"]
